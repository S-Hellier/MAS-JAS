### Pantry API Test Collection
### Use with VS Code REST Client extension or similar tools

@baseUrl = http://localhost:3001/api/v1/pantry
@userId = 816614f4-b6eb-4806-9e87-0ed87d62c317

### 1. Health Check
GET http://localhost:3001/health

### 2. Get All Pantry Items (should be empty initially)
GET {{baseUrl}}
x-user-id: {{userId}}

### 3. Create a New Pantry Item
POST {{baseUrl}}
Content-Type: application/json
x-user-id: {{userId}}

{
  "name": "Organic Bananas",
  "brand": "Whole Foods",
  "quantity": 6,
  "unit": "pieces",
  "category": "produce",
  "expirationDate": "2024-01-20",
  "nutritionInfo": {
    "calories": 105,
    "protein": 1.3,
    "carbohydrates": 27,
    "fat": 0.4,
    "fiber": 3.1,
    "sugar": 14.4,
    "sodium": 1,
    "servingSize": "1",
    "servingUnit": "medium banana"
  },
  "barcode": "1234567890123",
  "notes": "Perfect ripeness for smoothies"
}

### 4. Create Another Item (Dairy)
POST {{baseUrl}}/pantry
Content-Type: application/json
x-user-id: {{userId}}

{
  "name": "Greek Yogurt",
  "brand": "Chobani",
  "quantity": 4,
  "unit": "pieces",
  "category": "dairy",
  "expirationDate": "2024-01-25",
  "nutritionInfo": {
    "calories": 100,
    "protein": 15,
    "carbohydrates": 6,
    "fat": 0,
    "fiber": 0,
    "sugar": 4,
    "sodium": 50,
    "servingSize": "1",
    "servingUnit": "container"
  },
  "barcode": "5555555555555"
}

### 5. Create an Item Expiring Soon
POST {{baseUrl}}/pantry
Content-Type: application/json
x-user-id: {{userId}}

{
  "name": "Fresh Milk",
  "brand": "Horizon Organic",
  "quantity": 1,
  "unit": "gallons",
  "category": "dairy",
  "expirationDate": "2024-01-12",
  "nutritionInfo": {
    "calories": 150,
    "protein": 8,
    "carbohydrates": 12,
    "fat": 8,
    "fiber": 0,
    "sugar": 12,
    "sodium": 105,
    "servingSize": "1",
    "servingUnit": "cup"
  }
}

### 6. Get All Items (should now have 3 items)
GET {{baseUrl}}/pantry
x-user-id: {{userId}}

### 7. Get Items by Category (Dairy)
GET {{baseUrl}}/pantry?category=dairy
x-user-id: {{userId}}

### 8. Get Items Expiring Soon
GET {{baseUrl}}/pantry/expiring?days=7
x-user-id: {{userId}}

### 9. Search Items by Name
GET {{baseUrl}}/pantry?search=banana
x-user-id: {{userId}}

### 10. Get Single Item (replace {item-id} with actual ID from step 3)
GET {{baseUrl}}/pantry/{item-id}
x-user-id: {{userId}}

### 11. Update Item Quantity (replace {item-id} with actual ID)
PUT {{baseUrl}}/pantry/{item-id}
Content-Type: application/json
x-user-id: {{userId}}

{
  "quantity": 3,
  "notes": "Updated quantity - used some for smoothies"
}

### 12. Check Barcode Exists
GET {{baseUrl}}/pantry/barcode/1234567890123

### 13. Check Non-existent Barcode
GET {{baseUrl}}/pantry/barcode/9999999999999

### 14. Get Items with Pagination
GET {{baseUrl}}/pantry?page=1&limit=2&sortBy=name&sortOrder=asc
x-user-id: {{userId}}

### 15. Test Invalid Request (Missing Required Fields)
POST {{baseUrl}}/pantry
Content-Type: application/json
x-user-id: {{userId}}

{
  "name": "Test Item"
  // Missing required fields: quantity, unit, category, expirationDate
}

### 16. Test Invalid Category
POST {{baseUrl}}/pantry
Content-Type: application/json
x-user-id: {{userId}}

{
  "name": "Test Item",
  "quantity": 1,
  "unit": "pieces",
  "category": "invalid_category",
  "expirationDate": "2024-01-20"
}

### 17. Test Invalid Date Format
POST {{baseUrl}}/pantry
Content-Type: application/json
x-user-id: {{userId}}

{
  "name": "Test Item",
  "quantity": 1,
  "unit": "pieces",
  "category": "produce",
  "expirationDate": "invalid-date"
}

### 18. Delete Item (replace {item-id} with actual ID)
DELETE {{baseUrl}}/pantry/{item-id}
x-user-id: {{userId}}

### 19. Try to Get Deleted Item (should return 404)
GET {{baseUrl}}/pantry/{item-id}
x-user-id: {{userId}}

### 20. Test Without User ID Header (should work with default)
GET {{baseUrl}}/pantry
